{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","imdbId","className","src","alt","href","MoviesList","movies","map","movie","key","requestMovie","fetch","FindMovie","addMovie","isMovieAdded","setDuplicatedId","useState","query","setQuery","setMovie","isMovieFind","setIsMovieFind","a","trim","split","join","then","response","json","movieFromServer","Error","Title","imdbID","Poster","Plot","handleSubmit","event","preventDefault","searchMovie","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","onClick","App","data","setMovies","newMovie","find","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1220e539.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n  imdbId,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n  imdbId: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","\nconst BASE_URL = 'http://www.omdbapi.com/?apikey=8189ef4d&t=';\n\nexport const requestMovie = (title) => {\n  const movie = fetch(BASE_URL + title);\n\n  return movie;\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\nimport { requestMovie } from '../../api/api';\n\nexport const FindMovie = ({ addMovie, isMovieAdded, setDuplicatedId }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState(null);\n  const [isMovieFind, setIsMovieFind] = useState(true);\n\n  async function searchMovie() {\n    const movieFromServer = await requestMovie(query\n      .trim().split(' ').join('_'))\n      .then(response => response.json());\n\n    if (movieFromServer.Error) {\n      setIsMovieFind(false);\n    } else {\n      setMovie({\n        title: movieFromServer.Title,\n        imdbId: movieFromServer.imdbID,\n        imgUrl: movieFromServer.Poster,\n        imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbID}/`,\n        description: movieFromServer.Plot,\n      });\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    searchMovie();\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={event => handleSubmit(event)}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={isMovieFind ? 'input' : 'input is-danger'}\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n                setIsMovieFind(true);\n                setDuplicatedId(false);\n              }}\n            />\n          </div>\n\n          {!isMovieFind && (\n          <p className=\"help is-danger\">\n            Can&apos;t find a movie with such a title\n          </p>\n          )}\n          {isMovieAdded && movie && (\n          <p className=\"help is-danger\">\n            This movie is already added\n          </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => {\n                if (movie) {\n                  addMovie(movie);\n                  setQuery('');\n                }\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n      {movie && (\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        <MovieCard {...movie} />\n      </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  setDuplicatedId: PropTypes.func.isRequired,\n  addMovie: PropTypes.func.isRequired,\n  isMovieAdded: PropTypes.bool.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n  const [isMovieAdded, setDuplicatedId] = useState(false);\n\n  const addMovie = (newMovie) => {\n    if (!newMovie.imdbId\n      || movies.find(movie => movie.imdbId === newMovie.imdbId)\n    ) {\n      setDuplicatedId(true);\n\n      return;\n    }\n\n    setDuplicatedId(false);\n    setMovies(prevMovies => [newMovie, ...prevMovies]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList\n          movies={movies}\n        />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          setDuplicatedId={setDuplicatedId}\n          isMovieAdded={isMovieAdded}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}